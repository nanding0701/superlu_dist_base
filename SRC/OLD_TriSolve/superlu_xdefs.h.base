@extract -b Typedef.inc
/*
 * -- Distributed SuperLU routine (version 2.0) --
 * Lawrence Berkeley National Lab, Univ. of California Berkeley.
 * March 15, 2003
 *
 */

#ifndef __SUPERLU_@(pre)DEFS /* allow multiple inclusions */
#define __SUPERLU_@(pre)DEFS

/*
 * File name:	superlu_@(pre)defs.h
 * Purpose:     Distributed SuperLU data types and function prototypes
 * History:
 */

#include "superlu_defs.h"
@precision DCOMPLEX
#include "dcomplex.h"
@precision !

/* 
 * On each processor, the blocks in L are stored in compressed block
 * column format, the blocks in U are stored in compressed block row format.
 */
typedef struct {
    int_t   **Lrowind_bc_ptr; /* size ceil(NSUPERS/Pc)                 */
    @(type)  **Lnzval_bc_ptr;  /* size ceil(NSUPERS/Pc)                 */
    int_t   **Ufstnz_br_ptr;  /* size ceil(NSUPERS/Pr)                 */
    @(type)  **Unzval_br_ptr;  /* size ceil(NSUPERS/Pr)                 */
#if 0
    int_t   *Lsub_buf;        /* Buffer for the remote subscripts of L */
    double  *Lval_buf;        /* Buffer for the remote nonzeros of L   */
#endif
    int_t   *Lsub_buf_2[2];   /* Buffers for the remote subscripts of L*/
    @(type)  *Lval_buf_2[2];   /* Buffers for the remote nonzeros of L  */
    int_t   *Usub_buf;        /* Buffer for the remote subscripts of U */
    @(type)  *Uval_buf;        /* Buffer for the remote nonzeros of U   */
    @(type)  *ujrow;           /* used in panel factorization.          */
    int_t   bufmax[NBUFFERS]; /* Buffer size; 5 entries
			       *     0 : size of Lsub_buf[]
			       *     1 : size of Lval_buf[]
			       *     2 : size of Usub_buf[] 
			       *     3 : size of Uval_buf[]
			       *     4 : size of tempv[LDA]
			       */

    /*-- Record communication schedule for factorization. --*/
    int_t   *ToRecv;          /* Recv from no one (0), left (1), and up (2).*/
    int_t   *ToSendD;         /* Whether need to send down block row.       */
    int_t   **ToSendR;        /* List of processes to send right block col. */

    /*-- Record communication schedule for solves. --*/
    int_t   *fmod;            /* Modification count for L-solve            */
    int_t   **fsendx_plist;   /* Column process list to send down Xk       */
    int_t   *frecv;           /* Modifications to be recv'd in proc row    */
    int_t   nfrecvx;          /* Number of Xk I will receive in L-solve    */
    int_t   nfsendx;          /* Number of Xk I will send in L-solve       */
    int_t   *bmod;            /* Modification count for U-solve            */
    int_t   **bsendx_plist;   /* Column process list to send down Xk       */
    int_t   *brecv;           /* Modifications to be recv'd in proc row    */
    int_t   nbrecvx;          /* Number of Xk I will receive in U-solve    */
    int_t   nbsendx;          /* Number of Xk I will send in U-solve       */

    /*-- Auxiliary arrays used for solves. --*/
    int_t   *ilsum;           /* Starting position of each supernode in lsum
				 (local)  */
    int_t   ldalsum;          /* LDA of lsum (local) */
    int_t   SolveMsgSent;     /* Number of actual messages sent in LU-solve */
    int_t   SolveMsgVol;      /* Volume of messages sent in the solve phase */
} LocalLU_t;

typedef struct {
    int_t *etree;
    Glu_persist_t *Glu_persist;
    LocalLU_t *Llu;
} LUstruct_t;

/*-- Auxiliary data type used in PxGSTRS/PxGSTRS1. */
typedef struct {
    int_t lbnum;  /* Row block number (local).      */
    int_t indpos; /* Starting position in Uindex[]. */
} Ucb_indptr_t;

/*-- Data structure for communication during matrix-vector multiplication. */
typedef struct {
    int_t *extern_start;
    int_t *ind_tosend;    /* X indeices to be sent to other processes */
    int_t *ind_torecv;    /* X indeices to be received from other processes */
    int_t *ptr_ind_tosend;/* Printers to ind_tosend[] (Size procs)
			     (also point to val_torecv) */
    int_t *ptr_ind_torecv;/* Printers to ind_torecv[] (Size procs)
			     (also point to val_tosend) */
    int   *SendCounts;    /* Numbers of X indices to be sent
			     (also numbers of X values to be received) */
    int   *RecvCounts;    /* Numbers of X indices to be received
			     (also numbers of X values to be sent) */
    @(type) *val_tosend;   /* X values to be sent to other processes */
    @(type) *val_torecv;   /* X values to be received from other processes */
    int_t TotalIndSend;   /* Total number of indices to be sent
			     (also total number of values to be received) */
    int_t TotalValSend;   /* Total number of values to be sent.
			     (also total number of indices to be received) */
} p@(pre)gsmv_comm_t;

/*-- Data structure for redistribution of B and X --*/
typedef struct {
    int  *B_to_X_SendCnt;
    int  *X_to_B_SendCnt;
    int  *ptr_to_ibuf, *ptr_to_dbuf;
} pxgstrs_comm_t;

/*-- Data structure holding the information for the solution phase --*/
typedef struct {
    int_t *row_to_proc;
    int_t *inv_perm_c;
    int_t num_diag_procs, *diag_procs, *diag_len;
    p@(pre)gsmv_comm_t *gsmv_comm;
    pxgstrs_comm_t *gstrs_comm;
    int_t *A_colind_gsmv; /* After p@(pre)gsmv_init(), the global column
                             indices of A are translated into the relative
                             positions in the gathered x-vector.
                             This is re-used in repeated calls to p@(pre)gsmv() */
} SOLVEstruct_t;


/***********************************************************************
 * Function prototypes
 ***********************************************************************/

#ifdef __cplusplus
extern "C" {
#endif


/* Supernodal LU factor related */
extern void
@(pre)Create_CompCol_Matrix_dist(SuperMatrix *, int_t, int_t, int_t, @(type) *,
			    int_t *, int_t *, Stype_t, Dtype_t, Mtype_t);
extern void
@(pre)Create_CompRowLoc_Matrix_dist(SuperMatrix *, int_t, int_t, int_t, int_t,
			       int_t, @(type) *, int_t *, int_t *,
			       Stype_t, Dtype_t, Mtype_t);
extern void
@(pre)CompRow_to_CompCol_dist(int_t, int_t, int_t, @(type) *, int_t *, int_t *,
                         @(type) **, int_t **, int_t **);
extern int
@(pre)CompRow_loc_to_CompCol_global(int_t, SuperMatrix *, gridinfo_t *,
			       SuperMatrix *);
extern void
@(pre)Copy_CompCol_Matrix_dist(SuperMatrix *, SuperMatrix *);
extern void
@(pre)Create_Dense_Matrix_dist(SuperMatrix *, int_t, int_t, @(type) *, int_t,
			  Stype_t, Dtype_t, Mtype_t);
extern void
@(pre)Create_SuperNode_Matrix_dist(SuperMatrix *, int_t, int_t, int_t, @(type) *, 
			      int_t *, int_t *, int_t *, int_t *, int_t *,
			      Stype_t, Dtype_t, Mtype_t);
extern void
@(pre)Copy_Dense_Matrix_dist(int_t, int_t, @(type) *, int_t,
                        @(type) *, int_t);

extern void    @(pre)allocateA_dist (int_t, int_t, @(type) **, int_t **, int_t **);
extern void    @(pre)GenXtrue_dist (int_t, int_t, @(type) *, int_t);
extern void    @(pre)FillRHS_dist (char *, int_t, @(type) *, int_t,
                              SuperMatrix *, @(type) *, int_t);
extern int     @(pre)create_matrix(SuperMatrix *, int, @(type) **, int *, 
			      @(type) **, int *, FILE *, gridinfo_t *);

/* Driver related */
extern void    @(pre)gsequ_dist (SuperMatrix *, double *, double *, double *,
			    double *, double *, int_t *);
extern double  @(pre)langs_dist (char *, SuperMatrix *);
extern void    @(pre)laqgs_dist (SuperMatrix *, double *, double *, double,
			    double, double, char *);
extern void    p@(pre)gsequ (SuperMatrix *, double *, double *, double *,
			double *, double *, int_t *, gridinfo_t *);
extern double  p@(pre)langs (char *, SuperMatrix *, gridinfo_t *);
extern void    p@(pre)laqgs (SuperMatrix *, double *, double *, double,
			double, double, char *);
extern int     p@(pre)Permute_Dense_Matrix(int_t, int_t, int_t [], int_t[],
				      @(type) [], int, @(type) [], int, int,
				      gridinfo_t *);

extern int     sp_@(pre)trsv_dist (char *, char *, char *, SuperMatrix *,
			      SuperMatrix *, @(type) *, int *);
extern int     sp_@(pre)gemv_dist (char *, @(type), SuperMatrix *, @(type) *,
			      int, @(type), @(type) *, int);
extern int     sp_@(pre)gemm (char *, char *, int, int, int, @(type),
			SuperMatrix *, @(type) *, int, @(type), 
			@(type) *, int);

extern int_t @(pre)distribute(fact_t, int_t, SuperMatrix *, Glu_freeable_t *, 
			 LUstruct_t *, gridinfo_t *);
extern void  p@(pre)gssvx_ABglobal(superlu_options_t *, SuperMatrix *, 
			      ScalePermstruct_t *, @(type) *,
			      int, int, gridinfo_t *, LUstruct_t *, double *,
			      SuperLUStat_t *, int *);
extern int_t p@(pre)distribute(fact_t, int_t, SuperMatrix *, 
			 ScalePermstruct_t *, Glu_freeable_t *, 
			 LUstruct_t *, gridinfo_t *);
extern void  p@(pre)gssvx(superlu_options_t *, SuperMatrix *, 
		     ScalePermstruct_t *, @(type) *,
		     int, int, gridinfo_t *, LUstruct_t *,
		     SOLVEstruct_t *, double *, SuperLUStat_t *, int *);
extern int  @(pre)SolveInit(superlu_options_t *, SuperMatrix *, int_t [], int_t [],
		       int_t, LUstruct_t *, gridinfo_t *, SOLVEstruct_t *);
extern int_t pxgstrs_init(int_t, int_t, int_t, int_t,
	                  int_t [], int_t [], gridinfo_t *grid,
	                  Glu_persist_t *, SOLVEstruct_t *);
extern void pxgstrs_finalize(pxgstrs_comm_t *);
extern void @(pre)SolveFinalize(superlu_options_t *, SOLVEstruct_t *);
extern void @(pre)ldperm(int_t, int_t, int_t, int_t [], int_t [],
		    @(type) [], int_t *, double [], double []);
extern void p@(pre)gstrf(superlu_options_t *, int, int, double,
		    LUstruct_t*, gridinfo_t*, SuperLUStat_t*, int*);
extern void p@(pre)gstrs_Bglobal(int_t, LUstruct_t *, gridinfo_t *,
			     @(type) *, int_t, int, SuperLUStat_t *, int *);
extern void p@(pre)gstrs(int_t, LUstruct_t *, ScalePermstruct_t *, gridinfo_t *,
		    @(type) *, int_t, int_t, int_t, int, SOLVEstruct_t *,
		    SuperLUStat_t *, int *);
extern void @(pre)lsum_fmod(@(type) *, @(type) *, @(type) *, @(type) *,
		       int, int, int_t , int_t *, int_t, int_t, int_t,
		       int_t *, gridinfo_t *, LocalLU_t *, 
		       MPI_Request [], SuperLUStat_t *);
extern void @(pre)lsum_bmod(@(type) *, @(type) *, @(type) *,
                       int, int_t, int_t *, int_t *, Ucb_indptr_t **,
                       int_t **, int_t *, gridinfo_t *, LocalLU_t *,
		       MPI_Request [], SuperLUStat_t *);
extern void p@(pre)gsrfs(int_t, SuperMatrix *, double, LUstruct_t *,
		    ScalePermstruct_t *, gridinfo_t *,
		    @(type) [], int_t, @(type) [], int_t, int,
		    SOLVEstruct_t *, double *, SuperLUStat_t *, int *);
extern void p@(pre)gsrfs_ABXglobal(int_t, SuperMatrix *, double, LUstruct_t *,
		  gridinfo_t *, @(type) *, int_t, @(type) *, int_t,
		  int, double *, SuperLUStat_t *, int *);
extern int   p@(pre)gsmv_AXglobal_setup(SuperMatrix *, Glu_persist_t *,
				   gridinfo_t *, int_t *, int_t *[],
				   @(type) *[], int_t *[], int_t []);
extern int  p@(pre)gsmv_AXglobal(int_t, int_t [], @(type) [], int_t [],
	                       @(type) [], @(type) []);
extern int  p@(pre)gsmv_AXglobal_abs(int_t, int_t [], @(type) [], int_t [],
				 @(type) [], @(mod_type) []);
extern void p@(pre)gsmv_init(SuperMatrix *, int_t *, gridinfo_t *,
			p@(pre)gsmv_comm_t *);
extern void p@(pre)gsmv(int_t, SuperMatrix *, gridinfo_t *, p@(pre)gsmv_comm_t *,
		   @(type) x[], @(type) ax[]);
extern void p@(pre)gsmv_finalize(p@(pre)gsmv_comm_t *);

/* Memory-related */
extern @(type)  *@(type)Malloc_dist(int_t);
extern @(type)  *@(type)Calloc_dist(int_t);
@precision DCOMPLEX
extern double  *doubleMalloc_dist(int_t);
extern double  *doubleCalloc_dist(int_t);
@precision !
extern void  *duser_malloc_dist (int_t, int_t);
extern void  duser_free_dist (int_t, int_t);
extern int_t @(pre)QuerySpace_dist(int_t, LUstruct_t *, gridinfo_t *, mem_usage_t *);
extern void    Destroy_LU(int_t, gridinfo_t *, LUstruct_t *);
extern void    LUstructInit(const int_t, const int_t, LUstruct_t *);
extern void    LUstructFree(LUstruct_t *);

/* Auxiliary routines */
extern void    @(pre)fill_dist (@(type) *, int_t, @(type));
extern void    @(pre)inf_norm_error_dist (int_t, int_t, @(type)*, int_t,
                                     @(type)*, int_t, gridinfo_t*);
extern void    p@(pre)inf_norm_error(int, int_t, int_t, @(type) [], int_t,
				@(type) [], int_t , gridinfo_t *);
extern void  @(pre)readhb_dist (int, FILE *, int_t *, int_t *, int_t *, 
			   @(type) **, int_t **, int_t **);

/* Routines for debugging */
extern void  @(pre)PrintLblocks(int_t, int_t, gridinfo_t *, Glu_persist_t *,
		 	   LocalLU_t *);
extern void  @(pre)PrintUblocks(int_t, int_t, gridinfo_t *, Glu_persist_t *,
			   LocalLU_t *);
extern void  @(pre)Print_CompCol_Matrix_dist(SuperMatrix *);
extern void  @(pre)Print_Dense_Matrix_dist(SuperMatrix *);
extern int   @(pre)Print_CompRowLoc_Matrix_dist(SuperMatrix *);
@precision DCOMPLEX
extern void  PrintDoublecomplex(char *, int_t, doublecomplex *);
@precision !

#ifdef __cplusplus
  }
#endif

#endif /* __SUPERLU_dDEFS */

