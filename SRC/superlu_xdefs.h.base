/*! \file
Copyright (c) 2003, The Regents of the University of California, through
Lawrence Berkeley National Laboratory (subject to receipt of any required
approvals from U.S. Dept. of Energy)

All rights reserved.

The source code is distributed under BSD license, see the file License.txt
at the top-level directory.
*/
@extract -b Typedef.inc
/*! @file
 * \brief  Distributed SuperLU data types and function prototypes
 *
 * <pre>
 * -- Distributed SuperLU routine (version 7.0) --
 * Lawrence Berkeley National Lab, Univ. of California Berkeley,
 * Georgia Institute of Technology
 * November 1, 2007
 * April 5, 2015
 * September 18, 2018  version 6.0
 * February 8, 2019  version 6.1.1
 * May 10, 2019 version 7.0.0
 * </pre>
 */

#ifndef __SUPERLU_@(PRE)DEFS /* allow multiple inclusions */
#define __SUPERLU_@(PRE)DEFS

/*
 * File name:	superlu_@(pre)defs.h
 * Purpose:     Distributed SuperLU data types and function prototypes
 * History:
 */

#include "superlu_defs.h"
@precision DCOMPLEX
#include "dcomplex.h"
@precision !

/*-- Auxiliary data type used in PxGSTRS/PxGSTRS1. */
typedef struct {
    int_t lbnum;  /* Row block number (local).      */
    int_t indpos; /* Starting position in Uindex[]. */
} Ucb_indptr_t;

/*
 * On each processor, the blocks in L are stored in compressed block
 * column format, the blocks in U are stored in compressed block row format.
 */
#define MAX_LOOKAHEADS 50
typedef struct {
    int_t   **Lrowind_bc_ptr; /* size ceil(NSUPERS/Pc)                 */
    @(type) **Lnzval_bc_ptr;  /* size ceil(NSUPERS/Pc)                 */
    @(type) **Linv_bc_ptr;  /* size ceil(NSUPERS/Pc)                 */
    int_t   **Lindval_loc_bc_ptr; /* size ceil(NSUPERS/Pc)  pointers to locations in Lrowind_bc_ptr and Lnzval_bc_ptr */
    int_t   *Unnz; /* number of nonzeros per block column in U*/
	int_t   **Lrowind_bc_2_lsum; /* size ceil(NSUPERS/Pc)  map indices of Lrowind_bc_ptr to indices of lsum  */
    @(type)  **Uinv_bc_ptr;  /* size ceil(NSUPERS/Pc)     	*/
    int_t   **Ufstnz_br_ptr;  /* size ceil(NSUPERS/Pr)                 */
    @(type)  **Unzval_br_ptr;  /* size ceil(NSUPERS/Pr)                 */
        /*-- Data structures used for broadcast and reduction trees. --*/
    BcTree  *LBtree_ptr;       /* size ceil(NSUPERS/Pc)                */
    RdTree  *LRtree_ptr;       /* size ceil(NSUPERS/Pr)                */
    BcTree  *UBtree_ptr;       /* size ceil(NSUPERS/Pc)                */
    RdTree  *URtree_ptr;       /* size ceil(NSUPERS/Pr)			*/
#if 0
    int_t   *Lsub_buf;        /* Buffer for the remote subscripts of L */
    @(type)  *Lval_buf;        /* Buffer for the remote nonzeros of L   */
    int_t   *Usub_buf;        /* Buffer for the remote subscripts of U */
    @(type)  *Uval_buf;        /* Buffer for the remote nonzeros of U   */
#endif
    int_t   *Lsub_buf_2[MAX_LOOKAHEADS];   /* Buffers for the remote subscripts of L*/
    @(type)  *Lval_buf_2[MAX_LOOKAHEADS];   /* Buffers for the remote nonzeros of L  */
    int_t   *Usub_buf_2[MAX_LOOKAHEADS];   /* Buffer for the remote subscripts of U */
    @(type)  *Uval_buf_2[MAX_LOOKAHEADS];   /* Buffer for the remote nonzeros of U   */
    @(type)  *ujrow;           /* used in panel factorization.          */
    int_t   bufmax[NBUFFERS]; /* Maximum buffer size across all MPI ranks:
			       *  0 : maximum size of Lsub_buf[]
			       *  1 : maximum size of Lval_buf[]
			       *  2 : maximum size of Usub_buf[]
			       *  3 : maximum size of Uval_buf[]
			       *  4 : maximum size of tempv[LDA]
			       */

    /*-- Record communication schedule for factorization. --*/
    int   *ToRecv;          /* Recv from no one (0), left (1), and up (2).*/
    int   *ToSendD;         /* Whether need to send down block row.       */
    int   **ToSendR;        /* List of processes to send right block col. */

    /*-- Record communication schedule for forward/back solves. --*/
    int_t   *fmod;            /* Modification count for L-solve            */
    int_t   **fsendx_plist;   /* Column process list to send down Xk       */
    int_t   *frecv;           /* Modifications to be recv'd in proc row    */
    int_t   nfrecvx;          /* Number of Xk I will receive in L-solve    */
    int_t   nfsendx;          /* Number of Xk I will send in L-solve       */
    int_t   *bmod;            /* Modification count for U-solve            */
    int_t   **bsendx_plist;   /* Column process list to send down Xk       */
    int_t   *brecv;           /* Modifications to be recv'd in proc row    */
    int_t   nbrecvx;          /* Number of Xk I will receive in U-solve    */
    int_t   nbsendx;          /* Number of Xk I will send in U-solve       */
    int_t   *mod_bit;         /* Flag contribution from each row blocks    */

    /*-- Auxiliary arrays used for forward/back solves. --*/
    int_t   *ilsum;           /* Starting position of each supernode in lsum
				 (local)  */
    int_t   ldalsum;          /* LDA of lsum (local) */
    int_t   SolveMsgSent;     /* Number of actual messages sent in LU-solve */
    int_t   SolveMsgVol;      /* Volume of messages sent in the solve phase */


    /*********************/
    /* The following variables are used in the hybrid solver */

    /*-- Counts to be used in U^{-T} triangular solve. -- */
    int_t UT_SOLVE;
    int_t L_SOLVE;
    int_t FRECV;
    int_t ut_ldalsum;        /* LDA of lsum (local) */
    int_t *ut_ilsum;         /* ilsum in column-wise                        */
    int_t *utmod;            /* Modification count for Ut-solve.            */
    int_t **ut_sendx_plist;  /* Row process list to send down Xk            */
    int_t *utrecv;           /* Modifications to be recev'd in proc column. */
    int_t n_utsendx;         /* Number of Xk I will receive                 */
    int_t n_utrecvx;         /* Number of Xk I will send                    */
    int_t n_utrecvmod;
    int_t nroot;
    int_t *ut_modbit;
    int_t *Urbs;
    Ucb_indptr_t **Ucb_indptr;/* Vertical linked list pointing to Uindex[] */
    int_t  **Ucb_valptr;      /* Vertical linked list pointing to Unzval[] */

    /* some additional counters for L solve */
    int_t n;
    int_t nleaf;
    int_t nfrecvmod;
    int_t inv; /* whether the diagonal block is inverted*/
} LocalLU_t;


typedef struct {
    int_t *etree;
    Glu_persist_t *Glu_persist;
    LocalLU_t *Llu;
	char dt;
} LUstruct_t;


/*-- Data structure for communication during matrix-vector multiplication. */
typedef struct {
    int_t *extern_start;
    int_t *ind_tosend;    /* X indeices to be sent to other processes */
    int_t *ind_torecv;    /* X indeices to be received from other processes */
    int_t *ptr_ind_tosend;/* Printers to ind_tosend[] (Size procs)
			     (also point to val_torecv) */
    int_t *ptr_ind_torecv;/* Printers to ind_torecv[] (Size procs)
			     (also point to val_tosend) */
    int   *SendCounts;    /* Numbers of X indices to be sent
			     (also numbers of X values to be received) */
    int   *RecvCounts;    /* Numbers of X indices to be received
			     (also numbers of X values to be sent) */
    @(type) *val_tosend;   /* X values to be sent to other processes */
    @(type) *val_torecv;   /* X values to be received from other processes */
    int_t TotalIndSend;   /* Total number of indices to be sent
			     (also total number of values to be received) */
    int_t TotalValSend;   /* Total number of values to be sent.
			     (also total number of indices to be received) */
} p@(pre)gsmv_comm_t;

/*-- Data structure holding the information for the solution phase --*/
typedef struct {
    int_t *row_to_proc;
    int_t *inv_perm_c;
    int_t num_diag_procs, *diag_procs, *diag_len;
    p@(pre)gsmv_comm_t *gsmv_comm; /* communication metadata for SpMV,
         	       		      required by IterRefine.          */
    pxgstrs_comm_t *gstrs_comm;  /* communication metadata for SpTRSV. */
    int_t *A_colind_gsmv; /* After p@(pre)gsmv_init(), the global column
                             indices of A are translated into the relative
                             positions in the gathered x-vector.
                             This is re-used in repeated calls to p@(pre)gsmv() */
    int_t *xrow_to_proc; /* used by PDSLin */
} SOLVEstruct_t;


/*==== For 3D code ====*/

// new structures for pdgstrf_4_8 

typedef struct
{
    int_t nub;
    int_t klst;
    int_t ldu;
    int_t* usub;
    @(type)* uval;
} uPanelInfo_t;

typedef struct
{
    int_t *lsub;
    @(type) *lusup;
    int_t luptr0;
    int_t nlb;  //number of l blocks
    int_t nsupr;
} lPanelInfo_t;

typedef struct
{
    Remain_info_t *lookAhead_info, *Remain_info;
    Ublock_info_t *Ublock_info, *Ublock_info_Phi;
    
    int_t first_l_block_acc , first_u_block_acc;
    int_t last_offload ;
    int_t *Lblock_dirty_bit, * Ublock_dirty_bit;
    @(type) *lookAhead_L_buff, *Remain_L_buff;
    int_t lookAheadBlk;  /* number of blocks in look-ahead window */
    int_t RemainBlk ;    /* number of blocks outside look-ahead window */
    int_t  num_look_aheads, nsupers;
    int_t ldu, ldu_Phi;
    int_t num_u_blks, num_u_blks_Phi;

    int_t jj_cpu;
    @(type) *bigU_Phi;
    @(type) *bigU_host;
    int_t Lnbrow;
    int_t Rnbrow;

    int_t buffer_size;
    int_t bigu_size;
    int_t offloadCondition;
    int_t superlu_acc_offload;
    int_t nCudaStreams;
} HyP_t;  /* Data structures for Schur complement update. */

typedef struct 
{
    int_t * Lsub_buf ;
    @(type) * Lval_buf ;
    int_t * Usub_buf ;
    @(type) * Uval_buf ;
} LUValSubBuf_t;

int_t scuStatUpdate(
    int_t knsupc,
    HyP_t* HyP, 
    SCT_t* SCT,
    SuperLUStat_t *stat
    );

typedef struct trf3Dpartition_t
{
    gEtreeInfo_t gEtreeInfo;
    int_t* iperm_c_supno;
    int_t* myNodeCount;
    int_t* myTreeIdxs;
    int_t* myZeroTrIdxs;
    int_t** treePerm;
    sForest_t** sForests;
    int_t* supernode2treeMap;
    LUValSubBuf_t *LUvsb;
} trf3Dpartition_t;

typedef struct
{
    @(type) *bigU;
    @(type) *bigV;
} scuBufs_t;

typedef struct
{   
    @(type)* BlockLFactor;
    @(type)* BlockUFactor;
} diagFactBufs_t;

typedef struct
{
    Ublock_info_t* Ublock_info;
    Remain_info_t*  Remain_info;
    uPanelInfo_t* uPanelInfo;
    lPanelInfo_t* lPanelInfo;
} packLUInfo_t;

/*=====================*/

/***********************************************************************
 * Function prototypes
 ***********************************************************************/

#ifdef __cplusplus
extern "C" {
#endif


/* Supernodal LU factor related */
extern void
@(pre)Create_CompCol_Matrix_dist(SuperMatrix *, int_t, int_t, int_t, @(type) *,
			    int_t *, int_t *, Stype_t, Dtype_t, Mtype_t);
extern void
@(pre)Create_CompRowLoc_Matrix_dist(SuperMatrix *, int_t, int_t, int_t, int_t,
			       int_t, @(type) *, int_t *, int_t *,
			       Stype_t, Dtype_t, Mtype_t);
extern void
@(pre)CompRow_to_CompCol_dist(int_t, int_t, int_t, @(type) *, int_t *, int_t *,
                         @(type) **, int_t **, int_t **);
extern int
p@(pre)CompRow_loc_to_CompCol_global(int_t, SuperMatrix *, gridinfo_t *,
	 		        SuperMatrix *);
extern void
@(pre)Copy_CompCol_Matrix_dist(SuperMatrix *, SuperMatrix *);
extern void
@(pre)Create_Dense_Matrix_dist(SuperMatrix *, int_t, int_t, @(type) *, int_t,
			  Stype_t, Dtype_t, Mtype_t);
extern void
@(pre)Create_SuperNode_Matrix_dist(SuperMatrix *, int_t, int_t, int_t, @(type) *,
			      int_t *, int_t *, int_t *, int_t *, int_t *,
			      Stype_t, Dtype_t, Mtype_t);
extern void
@(pre)Copy_Dense_Matrix_dist(int_t, int_t, @(type) *, int_t,
                        @(type) *, int_t);

extern void    @(pre)allocateA_dist (int_t, int_t, @(type) **, int_t **, int_t **);
extern void    @(pre)GenXtrue_dist (int_t, int_t, @(type) *, int_t);
extern void    @(pre)FillRHS_dist (char *, int_t, @(type) *, int_t,
                              SuperMatrix *, @(type) *, int_t);
extern int     @(pre)create_matrix(SuperMatrix *, int, @(type) **, int *,
			      @(type) **, int *, FILE *, gridinfo_t *);
extern int     @(pre)create_matrix_rb(SuperMatrix *, int, @(type) **, int *,
			      @(type) **, int *, FILE *, gridinfo_t *);
extern int     @(pre)create_matrix_dat(SuperMatrix *, int, @(type) **, int *,
			      @(type) **, int *, FILE *, gridinfo_t *);
extern int 	   @(pre)create_matrix_postfix(SuperMatrix *, int, @(type) **, int *,
				  @(type) **, int *, FILE *, char *, gridinfo_t *);


/* Driver related */
extern void    @(pre)gsequ_dist (SuperMatrix *, double *, double *, double *,
			    double *, double *, int_t *);
extern double  @(pre)langs_dist (char *, SuperMatrix *);
extern void    @(pre)laqgs_dist (SuperMatrix *, double *, double *, double,
			    double, double, char *);
extern void    p@(pre)gsequ (SuperMatrix *, double *, double *, double *,
			double *, double *, int_t *, gridinfo_t *);
extern double  p@(pre)langs (char *, SuperMatrix *, gridinfo_t *);
extern void    p@(pre)laqgs (SuperMatrix *, double *, double *, double,
			double, double, char *);
extern int     p@(pre)Permute_Dense_Matrix(int_t, int_t, int_t [], int_t[],
				      @(type) [], int, @(type) [], int, int,
				      gridinfo_t *);

extern int     sp_@(pre)trsv_dist (char *, char *, char *, SuperMatrix *,
			      SuperMatrix *, @(type) *, int *);
extern int     sp_@(pre)gemv_dist (char *, @(type), SuperMatrix *, @(type) *,
			      int, @(type), @(type) *, int);
extern int     sp_@(pre)gemm_dist (char *, int, @(type), SuperMatrix *,
                        @(type) *, int, @(type), @(type) *, int);

extern float @(pre)distribute(fact_t, int_t, SuperMatrix *, Glu_freeable_t *,
			 LUstruct_t *, gridinfo_t *);
extern void  p@(pre)gssvx_ABglobal(superlu_dist_options_t *, SuperMatrix *,
			      ScalePermstruct_t *, @(type) *,
			      int, int, gridinfo_t *, LUstruct_t *, double *,
			      SuperLUStat_t *, int *);
extern float p@(pre)distribute(fact_t, int_t, SuperMatrix *,
			 ScalePermstruct_t *, Glu_freeable_t *,
			 LUstruct_t *, gridinfo_t *);
extern void  p@(pre)gssvx(superlu_dist_options_t *, SuperMatrix *,
		     ScalePermstruct_t *, @(type) *,
		     int, int, gridinfo_t *, LUstruct_t *,
		     SOLVEstruct_t *, double *, SuperLUStat_t *, int *);
extern void  p@(pre)Compute_Diag_Inv(int_t, LUstruct_t *,gridinfo_t *, SuperLUStat_t *, int *);
extern int  @(pre)SolveInit(superlu_dist_options_t *, SuperMatrix *, int_t [], int_t [],
		       int_t, LUstruct_t *, gridinfo_t *, SOLVEstruct_t *);
extern void @(pre)SolveFinalize(superlu_dist_options_t *, SOLVEstruct_t *);
extern int_t pxgstrs_init(int_t, int_t, int_t, int_t,
                          int_t [], int_t [], gridinfo_t *grid,
	                  Glu_persist_t *, SOLVEstruct_t *);
extern void pxgstrs_finalize(pxgstrs_comm_t *);
extern int  @(pre)ldperm_dist(int_t, int_t, int_t, int_t [], int_t [],
		    @(type) [], int_t *, double [], double []);
extern int  static_schedule(superlu_dist_options_t *, int, int,
		            LUstruct_t *, gridinfo_t *, SuperLUStat_t *,
			    int_t *, int_t *, int *);
extern void LUstructInit(const int_t, LUstruct_t *);
extern void LUstructFree(LUstruct_t *);
extern void Destroy_LU(int_t, gridinfo_t *, LUstruct_t *);
extern void Destroy_Tree(int_t, gridinfo_t *, LUstruct_t *);
extern void @(pre)scatter_l (int ib, int ljb, int nsupc, int_t iukp, int_t* xsup,
			int klst, int nbrow, int_t lptr, int temp_nbrow,
			int_t* usub, int_t* lsub, @(type) *tempv,
			int* indirect_thread, int* indirect2,
			int_t ** Lrowind_bc_ptr, @(type) **Lnzval_bc_ptr,
			gridinfo_t * grid);
extern void dscatter_u (int ib, int jb, int nsupc, int_t iukp, int_t * xsup,
                        int klst, int nbrow, int_t lptr, int temp_nbrow,
                        int_t* lsub, int_t* usub, @(type)* tempv,
                        int_t ** Ufstnz_br_ptr, @(type) **Unzval_br_ptr,
                        gridinfo_t * grid);
extern int_t p@(pre)gstrf(superlu_dist_options_t *, int, int, double,
		    LUstruct_t*, gridinfo_t*, SuperLUStat_t*, int*);

/* #define GPU_PROF
#define IPM_PROF */

/* Solve related */
extern void p@(pre)gstrs_Bglobal(int_t, LUstruct_t *, gridinfo_t *,
			     @(type) *, int_t, int, SuperLUStat_t *, int *);
extern void p@(pre)gstrs(int_t, LUstruct_t *, ScalePermstruct_t *, gridinfo_t *,
		    @(type) *, int_t, int_t, int_t, int, SOLVEstruct_t *,
		    SuperLUStat_t *, int *);
extern int_t p@(pre)ReDistribute_B_to_X(@(type) *B, int_t m_loc, int nrhs, int_t ldb,
				   int_t fst_row, int_t *ilsum, @(type) *x,
				   ScalePermstruct_t *, Glu_persist_t *,
				   gridinfo_t *, SOLVEstruct_t *);
extern void @(pre)lsum_fmod(@(type) *, @(type) *, @(type) *, @(type) *,
		       int, int, int_t , int_t *, int_t, int_t, int_t,
		       int_t *, gridinfo_t *, LocalLU_t *,
		       MPI_Request [], SuperLUStat_t *);
extern void @(pre)lsum_bmod(@(type) *, @(type) *, @(type) *,
                       int, int_t, int_t *, int_t *, Ucb_indptr_t **,
                       int_t **, int_t *, gridinfo_t *, LocalLU_t *,
		       MPI_Request [], SuperLUStat_t *);

extern void @(pre)lsum_fmod_inv(@(type) *, @(type) *, @(type) *, @(type) *,
		       int, int_t , int_t *,
		       int_t *, gridinfo_t *, LocalLU_t *,
		       SuperLUStat_t **, int_t *, int_t *, int_t, int_t, int_t, int_t, int, int);
extern void @(pre)lsum_fmod_inv_master(@(type) *, @(type) *, @(type) *, @(type) *,
		       int, int, int_t , int_t *, int_t,
		       int_t *, gridinfo_t *, LocalLU_t *,
		       SuperLUStat_t **, int_t, int_t, int_t, int_t, int, int);
extern void @(pre)lsum_bmod_inv(@(type) *, @(type) *, @(type) *, @(type) *,
                       int, int_t, int_t *, int_t *, Ucb_indptr_t **,
                       int_t **, int_t *, gridinfo_t *, LocalLU_t *,
		       SuperLUStat_t **, int_t *, int_t *, int_t, int_t, int, int);
extern void @(pre)lsum_bmod_inv_master(@(type) *, @(type) *, @(type) *, @(type) *,
                       int, int_t, int_t *, int_t *, Ucb_indptr_t **,
                       int_t **, int_t *, gridinfo_t *, LocalLU_t *,
		       SuperLUStat_t **, int_t, int_t, int, int);

extern void p@(pre)gsrfs(int_t, SuperMatrix *, double, LUstruct_t *,
		    ScalePermstruct_t *, gridinfo_t *,
		    @(type) [], int_t, @(type) [], int_t, int,
		    SOLVEstruct_t *, double *, SuperLUStat_t *, int *);
extern void p@(pre)gsrfs_ABXglobal(int_t, SuperMatrix *, double, LUstruct_t *,
		  gridinfo_t *, @(type) *, int_t, @(type) *, int_t,
		  int, double *, SuperLUStat_t *, int *);
extern int   p@(pre)gsmv_AXglobal_setup(SuperMatrix *, Glu_persist_t *,
				   gridinfo_t *, int_t *, int_t *[],
				   @(type) *[], int_t *[], int_t []);
extern int  p@(pre)gsmv_AXglobal(int_t, int_t [], @(type) [], int_t [],
	                       @(type) [], @(type) []);
extern int  p@(pre)gsmv_AXglobal_abs(int_t, int_t [], @(type) [], int_t [],
				 @(type) [], @(mod_type) []);
extern void p@(pre)gsmv_init(SuperMatrix *, int_t *, gridinfo_t *,
			p@(pre)gsmv_comm_t *);
extern void p@(pre)gsmv(int_t, SuperMatrix *, gridinfo_t *, p@(pre)gsmv_comm_t *,
		   @(type) x[], @(type) ax[]);
extern void p@(pre)gsmv_finalize(p@(pre)gsmv_comm_t *);

/* Memory-related */
extern @(type)  *@(type)Malloc_dist(int_t);
extern @(type)  *@(type)Calloc_dist(int_t);
@precision DCOMPLEX
extern double  *doubleMalloc_dist(int_t);
extern double  *doubleCalloc_dist(int_t);
@precision !
extern void  *duser_malloc_dist (int_t, int_t);
extern void  duser_free_dist (int_t, int_t);
extern int_t @(pre)QuerySpace_dist(int_t, LUstruct_t *, gridinfo_t *,
			      SuperLUStat_t *, superlu_dist_mem_usage_t *);

/* Auxiliary routines */

extern void @(pre)Clone_CompRowLoc_Matrix_dist(SuperMatrix *, SuperMatrix *);
extern void @(pre)Copy_CompRowLoc_Matrix_dist(SuperMatrix *, SuperMatrix *);
extern void @(pre)Zero_CompRowLoc_Matrix_dist(SuperMatrix *);
extern void @(pre)ScaleAddId_CompRowLoc_Matrix_dist(SuperMatrix *, @(type));
extern void @(pre)ScaleAdd_CompRowLoc_Matrix_dist(SuperMatrix *, SuperMatrix *, @(type));
extern void @(pre)ZeroLblocks(int, int_t, gridinfo_t *, LUstruct_t *);
extern void    @(pre)fill_dist (@(type) *, int_t, @(type));
extern void    @(pre)inf_norm_error_dist (int_t, int_t, @(type)*, int_t,
                                     @(type)*, int_t, gridinfo_t*);
extern void    p@(pre)inf_norm_error(int, int_t, int_t, @(type) [], int_t,
				@(type) [], int_t , gridinfo_t *);
extern void  @(pre)readhb_dist (int, FILE *, int_t *, int_t *, int_t *,
			   @(type) **, int_t **, int_t **);
extern void  @(pre)readtriple_dist(FILE *, int_t *, int_t *, int_t *,
			 @(type) **, int_t **, int_t **);
extern void  @(pre)readtriple_noheader(FILE *, int_t *, int_t *, int_t *,
			 @(type) **, int_t **, int_t **);
extern void  @(pre)readrb_dist(int, FILE *, int_t *, int_t *, int_t *,
		     @(type) **, int_t **, int_t **);
extern void  @(pre)readMM_dist(FILE *, int_t *, int_t *, int_t *,
	                  @(type) **, int_t **, int_t **);
extern int  @(pre)read_binary(FILE *, int_t *, int_t *, int_t *,
	                  @(type) **, int_t **, int_t **);

/* Distribute the data for numerical factorization */
extern float @(pre)dist_psymbtonum(fact_t, int_t, SuperMatrix *,
                                ScalePermstruct_t *, Pslu_freeable_t *,
                                LUstruct_t *, gridinfo_t *);
extern void p@(pre)GetDiagU(int_t, LUstruct_t *, gridinfo_t *, @(type) *);


/* Routines for debugging */
extern void  @(pre)PrintLblocks(int, int_t, gridinfo_t *, Glu_persist_t *,
		 	   LocalLU_t *);
extern void  @(pre)PrintUblocks(int, int_t, gridinfo_t *, Glu_persist_t *,
			   LocalLU_t *);
extern void  @(pre)Print_CompCol_Matrix_dist(SuperMatrix *);
extern void  @(pre)Print_Dense_Matrix_dist(SuperMatrix *);
extern int   @(pre)Print_CompRowLoc_Matrix_dist(SuperMatrix *);
extern int   file_@(pre)Print_CompRowLoc_Matrix_dist(FILE *fp, SuperMatrix *A);
@precision DOUBLE
extern int   file_PrintDouble5(FILE *, char *, int_t, double *);
@precision DCOMPLEX
extern void  PrintDoublecomplex(char *, int_t, doublecomplex *);
extern int   file_PrintDoublecomplex(FILE *fp, char *, int_t, doublecomplex *);
@precision !


/* BLAS */

#ifdef USE_VENDOR_BLAS
extern void @(pre)gemm_(const char*, const char*, const int*, const int*, const int*,
                  const @(type)*, const @(type)*, const int*, const @(type)*,
                  const int*, const @(type)*, @(type)*, const int*, int, int);
extern void @(pre)trsv_(char*, char*, char*, int*, @(type)*, int*,
                  @(type)*, int*, int, int, int);
extern void @(pre)trsm_(char*, char*, char*, char*, int*, int*,
                  @(type)*, @(type)*, int*, @(type)*,
                  int*, int, int, int, int);
extern void @(pre)gemv_(char *, int *, int *, @(type) *, @(type) *a, int *,
                  @(type) *, int *, @(type) *, @(type) *, int *, int);

@precision DOUBLE
extern void @(pre)ger_(int*, int*, @(type)*, @(type)*, int*,
                 @(type)*, int*, @(type)*, int*);
@precision DCOMPLEX
extern void @(pre)geru_(int*, int*, @(type)*, @(type)*, int*,
                 @(type)*, int*, @(type)*, int*);
@precision !

#else
extern int @(pre)gemm_(const char*, const char*, const int*, const int*, const int*,
                   const @(type)*,  const @(type)*,  const int*,  const @(type)*,
                   const int*,  const @(type)*, @(type)*, const int*);
extern int @(pre)trsv_(char*, char*, char*, int*, @(type)*, int*,
                  @(type)*, int*);
extern int @(pre)trsm_(char*, char*, char*, char*, int*, int*,
                  @(type)*, @(type)*, int*, @(type)*, int*);
extern int @(pre)gemv_(char *, int *, int *, @(type) *, @(type) *a, int *,
                  @(type) *, int *, @(type) *, @(type) *, int *);
@precision DOUBLE
extern void @(pre)ger_(int*, int*, @(type)*, @(type)*, int*,
                 @(type)*, int*, @(type)*, int*);
@precision DCOMPLEX
extern int @(pre)geru_(int*, int*, @(type)*, @(type)*, int*,
                 @(type)*, int*, @(type)*, int*);
@precision !

#endif

extern int @(pre)scal_(int *n, @(type) *da, @(type) *dx, int *incx);
extern int @(pre)axpy_(int *n, @(type) *za, @(type) *zx, 
	               int *incx, @(type) *zy, int *incy);
// LAPACK routine
extern void @(pre)trtri_(char*, char*, int*, @(type)*, int*, int*);


/*==== For 3D code ====*/

extern void p@(pre)gssvx3d (superlu_dist_options_t *, SuperMatrix *,
		       ScalePermstruct_t *, @(type) B[], int ldb, int nrhs,
		       gridinfo3d_t *, LUstruct_t *, SOLVEstruct_t *, 
		       double *berr, SuperLUStat_t *, int *info);
extern int_t p@(pre)gstrf3d(superlu_dist_options_t *, int m, int n, double anorm,
		       trf3Dpartition_t*, SCT_t *, LUstruct_t *,
		       gridinfo3d_t *, SuperLUStat_t *, int *);
extern void Init_HyP(HyP_t* HyP, LocalLU_t *Llu, int_t mcb, int_t mrb );
extern void Free_HyP(HyP_t* HyP);
extern int updateDirtyBit(int_t k0, HyP_t* HyP, gridinfo_t* grid);

    /* from scatter.h */
extern void
@(pre)block_gemm_scatter( int_t lb, int_t j, Ublock_info_t *Ublock_info,
                    Remain_info_t *Remain_info, @(type) *L_mat, int_t ldl,
                    @(type) *U_mat, int_t ldu,  @(type) *bigV,
                    // int_t jj0,
                    int_t knsupc,  int_t klst,
                    int_t *lsub, int_t *usub, int_t ldt,
                    int_t thread_id,
                    int_t *indirect, int_t *indirect2,
                    int_t **Lrowind_bc_ptr, @(type) **Lnzval_bc_ptr,
                    int_t **Ufstnz_br_ptr, @(type) **Unzval_br_ptr,
                    int_t *xsup, gridinfo_t *, SuperLUStat_t *
#ifdef SCATTER_PROFILE
                    , double *Host_TheadScatterMOP, double *Host_TheadScatterTimer
#endif
                  );
/*this version uses a lock to prevent multiple thread updating the same block*/
extern void
@(pre)block_gemm_scatter_lock( int_t lb, int_t j, omp_lock_t* lock,
                         Ublock_info_t *Ublock_info,  Remain_info_t *Remain_info,
                         @(type) *L_mat, int_t ldl, @(type) *U_mat, int_t ldu,
                         @(type) *bigV,
                         // int_t jj0,
                         int_t knsupc,  int_t klst,
                         int_t *lsub, int_t *usub, int_t ldt,
                         int_t thread_id,
                         int_t *indirect, int_t *indirect2,
                         int_t **Lrowind_bc_ptr, @(type) **Lnzval_bc_ptr,
                         int_t **Ufstnz_br_ptr, @(type) **Unzval_br_ptr,
                         int_t *xsup, gridinfo_t *
#ifdef SCATTER_PROFILE
                         , double *Host_TheadScatterMOP, double *Host_TheadScatterTimer
#endif
                       );
extern int_t
@(pre)block_gemm_scatterTopLeft( int_t lb,  int_t j, @(type)* bigV,
				 int_t knsupc,  int_t klst, int_t* lsub,
                                 int_t * usub, int_t ldt,
				 int_t* indirect, int_t* indirect2,
                                 HyP_t* HyP, LUstruct_t *, gridinfo_t*,
                                 SCT_t*SCT, SuperLUStat_t *
                               );
extern int_t 
@(pre)block_gemm_scatterTopRight( int_t lb,  int_t j, @(type)* bigV,
				  int_t knsupc,  int_t klst, int_t* lsub,
                                  int_t * usub, int_t ldt,
				  int_t* indirect, int_t* indirect2,
                                  HyP_t* HyP, LUstruct_t *, gridinfo_t*,
                                  SCT_t*SCT, SuperLUStat_t * );
extern int_t
@(pre)block_gemm_scatterBottomLeft( int_t lb,  int_t j, @(type)* bigV,
				    int_t knsupc,  int_t klst, int_t* lsub,
                                    int_t * usub, int_t ldt, 
				    int_t* indirect, int_t* indirect2,
                                    HyP_t* HyP, LUstruct_t *, gridinfo_t*,
                                    SCT_t*SCT, SuperLUStat_t * );
extern int_t 
@(pre)block_gemm_scatterBottomRight( int_t lb,  int_t j, @(type)* bigV,
				     int_t knsupc,  int_t klst, int_t* lsub,
                                     int_t * usub, int_t ldt,
				     int_t* indirect, int_t* indirect2,
                                     HyP_t* HyP, LUstruct_t *, gridinfo_t*,
                                     SCT_t*SCT, SuperLUStat_t * );

    /* from gather.h */
extern void @(pre)gather_u(int_t num_u_blks,
              Ublock_info_t *Ublock_info, int_t * usub,
              @(type) *uval,  @(type) *bigU,  int_t ldu,
              int_t *xsup, int_t klst                /* for SuperSize */
             );

extern void @(pre)gather_l( int_t num_LBlk, int_t knsupc,
               Remain_info_t *L_info,
               @(type) * lval, int_t LD_lval,
               @(type) * L_buff );

extern void @(pre)Rgather_L(int_t k, int_t *lsub, @(type) *lusup, gEtreeInfo_t*,
		      Glu_persist_t *, gridinfo_t *, HyP_t *,
		      int_t *myIperm, int_t *iperm_c_supno );
extern void @(pre)Rgather_U(int_t k, int_t jj0, int_t *usub, @(type) *uval,
		      @(type) *bigU, gEtreeInfo_t*, Glu_persist_t *,
		      gridinfo_t *, HyP_t *, int_t *myIperm,
		      int_t *iperm_c_supno, int_t *perm_u);

    /* from xtrf3Dpartition.h */
extern trf3Dpartition_t* @(pre)initTrf3Dpartition(int_t nsupers,
					     superlu_dist_options_t *options,
					     LUstruct_t *LUstruct, gridinfo3d_t * grid3d);
extern void @(pre)3D_printMemUse(trf3Dpartition_t*  trf3Dpartition,
			    LUstruct_t *LUstruct, gridinfo3d_t * grid3d);

extern int* getLastDep(gridinfo_t *grid, SuperLUStat_t *stat,
		       superlu_dist_options_t *options, LocalLU_t *Llu,
		       int_t* xsup, int_t num_look_aheads, int_t nsupers,
		       int_t * iperm_c_supno);

extern void @(pre)init3DLUstructForest( int_t* myTreeIdxs, int_t* myZeroTrIdxs,
				  sForest_t**  sForests, LUstruct_t* LUstruct,
				  gridinfo3d_t* grid3d);

extern int_t @(pre)gatherAllFactoredLUFr(int_t* myZeroTrIdxs, sForest_t* sForests,
				   LUstruct_t* LUstruct, gridinfo3d_t* grid3d,
				   SCT_t* SCT );

    /* The following are from pdgstrf2.h */
#if 0 // Sherry: same routine names, but different code !!!!!!!
extern void p@(pre)gstrf2_trsm(superlu_dist_options_t *options, int_t, int_t,
                          int_t k, double thresh, Glu_persist_t *,
			  gridinfo_t *, LocalLU_t *, MPI_Request *U_diag_blk_send_req,
			  int tag_ub, SuperLUStat_t *, int *info, SCT_t *);
#ifdef _CRAY
void p@(pre)gstrs2_omp (int_t, int_t, int_t, Glu_persist_t *, gridinfo_t *,
                      LocalLU_t *, SuperLUStat_t *, _fcd, _fcd, _fcd);
#else
void p@(pre)gstrs2_omp (int_t, int_t, int_t, int_t *, @(type)*, Glu_persist_t *, gridinfo_t *,
                      LocalLU_t *, SuperLUStat_t *, Ublock_info_t *, @(type) *bigV, int_t ldt, SCT_t *SCT );
#endif

#else 
extern void p@(pre)gstrf2_trsm(superlu_dist_options_t * options, int_t k0, int_t k,
			  double thresh, Glu_persist_t *, gridinfo_t *,
			  LocalLU_t *, MPI_Request *, int tag_ub,
			  SuperLUStat_t *, int *info);
extern void p@(pre)gstrs2_omp(int_t k0, int_t k, Glu_persist_t *, gridinfo_t *,
			 LocalLU_t *, Ublock_info_t *, SuperLUStat_t *);
#endif // same routine names   !!!!!!!!

extern int_t @(pre)LpanelUpdate(int_t off0, int_t nsupc, @(type)* ublk_ptr,
			  int_t ld_ujrow, @(type)* lusup, int_t nsupr, SCT_t*);
extern void Local_@(PRE)gstrf2(superlu_dist_options_t *options, int_t k,
			  double thresh, @(type) *BlockUFactor, Glu_persist_t *,
			  gridinfo_t *, LocalLU_t *,
                          SuperLUStat_t *, int *info, SCT_t*);
extern int_t @(pre)Trs2_GatherU(int_t iukp, int_t rukp, int_t klst,
			  int_t nsupc, int_t ldu, int_t *usub,
			  @(type)* uval, @(type) *tempv);
extern int_t @(pre)Trs2_ScatterU(int_t iukp, int_t rukp, int_t klst,
			   int_t nsupc, int_t ldu, int_t *usub,
			   @(type)* uval, @(type) *tempv);
extern int_t @(pre)Trs2_GatherTrsmScatter(int_t klst, int_t iukp, int_t rukp,
                             int_t *usub, @(type)* uval, @(type) *tempv,
                             int_t knsupc, int_t nsupr, @(type)* lusup,
                             Glu_persist_t *Glu_persist)  ;
extern void p@(pre)gstrs2
#ifdef _CRAY
(
    int_t m, int_t k0, int_t k, Glu_persist_t *Glu_persist, gridinfo_t *grid,
    LocalLU_t *Llu, SuperLUStat_t *stat, _fcd ftcs1, _fcd ftcs2, _fcd ftcs3
);
#else
(
    int_t m, int_t k0, int_t k, Glu_persist_t *Glu_persist, gridinfo_t *grid,
    LocalLU_t *Llu, SuperLUStat_t *stat
);
#endif

extern void p@(pre)gstrf2(superlu_dist_options_t *, int_t nsupers, int_t k0,
		     int_t k, double thresh, Glu_persist_t *, gridinfo_t *,
		     LocalLU_t *, MPI_Request *, int, SuperLUStat_t *, int *);

    /* from p3dcomm.h */
extern int_t @(pre)AllocLlu(int_t nsupers, LUstruct_t * LUstruct, gridinfo3d_t* grid3d);
extern int_t @(pre)p3dScatter(int_t n, LUstruct_t * LUstruct, gridinfo3d_t* grid3d);
extern int_t @(pre)scatter3dLPanels(int_t nsupers,
                       LUstruct_t * LUstruct, gridinfo3d_t* grid3d);
extern int_t @(pre)scatter3dUPanels(int_t nsupers,
                       LUstruct_t * LUstruct, gridinfo3d_t* grid3d);
extern int_t @(pre)collect3dLpanels(int_t layer, int_t nsupers, LUstruct_t * LUstruct, gridinfo3d_t* grid3d);
extern int_t @(pre)collect3dUpanels(int_t layer, int_t nsupers, LUstruct_t * LUstruct, gridinfo3d_t* grid3d);
extern int_t @(pre)p3dCollect(int_t layer, int_t n, LUstruct_t * LUstruct, gridinfo3d_t* grid3d);
/*zero out LU non zero entries*/
extern int_t @(pre)zeroSetLU(int_t nnodes, int_t* nodeList , LUstruct_t *, gridinfo3d_t*);
extern int_t AllocGlu(int_t n, int_t nsupers, LUstruct_t *, gridinfo3d_t*);

/* Reduces L and U panels of nodes in the List nodeList (size=nnnodes)
receiver[L(nodelist)] =sender[L(nodelist)] +receiver[L(nodelist)]
receiver[U(nodelist)] =sender[U(nodelist)] +receiver[U(nodelist)]
*/
int_t @(pre)reduceAncestors3d(int_t sender, int_t receiver,
                        int_t nnodes, int_t* nodeList,
                        @(type)* Lval_buf, @(type)* Uval_buf,
                        LUstruct_t* LUstruct,  gridinfo3d_t* grid3d, SCT_t* SCT);
/*reduces all nodelists required in a level*/
int_t @(pre)reduceAllAncestors3d(int_t ilvl, int_t* myNodeCount,
                           int_t** treePerm,
                           LUValSubBuf_t*LUvsb,
                           LUstruct_t* LUstruct,
                           gridinfo3d_t* grid3d,
                           SCT_t* SCT );
/*
	Copies factored L and U panels from sender grid to receiver grid
	receiver[L(nodelist)] <-- sender[L(nodelist)];
	receiver[U(nodelist)] <-- sender[U(nodelist)];
*/
int_t @(pre)gatherFactoredLU(int_t sender, int_t receiver,
                       int_t nnodes, int_t *nodeList, LUValSubBuf_t*LUvsb,
                       LUstruct_t* LUstruct, gridinfo3d_t* grid3d,SCT_t* SCT );

/*Gathers all the L and U factors to grid 0 for solve stage 
	By  repeatidly calling above function*/
int_t @(pre)gatherAllFactoredLU(trf3Dpartition_t*  trf3Dpartition, LUstruct_t* LUstruct,
			   gridinfo3d_t* grid3d, SCT_t* SCT );

/*Distributes data in each layer and initilizes ancestors
 as zero in required nodes*/
int_t @(pre)init3DLUstruct( int_t* myTreeIdxs, int_t* myZeroTrIdxs,
                      int_t* nodeCount, int_t** nodeList,
                      LUstruct_t* LUstruct, gridinfo3d_t* grid3d);

int_t @(pre)zSendLPanel(int_t k, int_t receiver,
		   LUstruct_t* LUstruct,  gridinfo3d_t* grid3d, SCT_t* SCT);
int_t @(pre)zRecvLPanel(int_t k, int_t sender, @(type) alpha, 
                   @(type) beta, @(type)* Lval_buf,
		   LUstruct_t* LUstruct,  gridinfo3d_t* grid3d, SCT_t* SCT);
int_t @(pre)zSendUPanel(int_t k, int_t receiver,
		   LUstruct_t* LUstruct,  gridinfo3d_t* grid3d, SCT_t* SCT);
int_t @(pre)zRecvUPanel(int_t k, int_t sender, @(type) alpha,
                   @(type) beta, @(type)* Uval_buf,
		   LUstruct_t* LUstruct,  gridinfo3d_t* grid3d, SCT_t* SCT);

    /* from communication_aux.h */
extern int_t @(pre)IBcast_LPanel (int_t k, int_t k0, int_t* lsub, @(type)* lusup,
			     gridinfo_t *, int* msgcnt, MPI_Request *,
			     int_t **ToSendR, int_t *xsup, int );
extern int_t @(pre)Bcast_LPanel(int_t k, int_t k0, int_t* lsub, @(type)* lusup,
			   gridinfo_t *, int* msgcnt, int_t **ToSendR,
			   int_t *xsup , SCT_t*, int);
extern int_t @(pre)IBcast_UPanel(int_t k, int_t k0, int_t* usub, @(type)* uval,
			    gridinfo_t *, int* msgcnt, MPI_Request *,
			    int_t *ToSendD, int );
extern int_t @(pre)Bcast_UPanel(int_t k, int_t k0, int_t* usub, @(type)* uval,
			   gridinfo_t *, int* msgcnt, int_t *ToSendD, SCT_t*, int);
extern int_t @(pre)Irecv_LPanel (int_t k, int_t k0,  int_t* Lsub_buf, 
			    @(type)* Lval_buf, gridinfo_t *,
			    MPI_Request *, LocalLU_t *, int);
extern int_t @(pre)Irecv_UPanel(int_t k, int_t k0, int_t* Usub_buf, @(type)*,
			   LocalLU_t *, gridinfo_t*, MPI_Request *, int);
extern int_t Wait_LSend(int_t k, gridinfo_t *grid, int_t **ToSendR,
			MPI_Request *s, SCT_t*);
extern int_t Wait_USend(MPI_Request *, gridinfo_t *, SCT_t *);
extern int_t @(pre)Wait_URecv(MPI_Request *, int* msgcnt, SCT_t *);
extern int_t Check_LRecv(MPI_Request*, int* msgcnt);
extern int_t @(pre)Wait_LRecv(MPI_Request*, int* msgcnt, int* msgcntsU,
			 gridinfo_t *, SCT_t*);
extern int_t @(pre)ISend_UDiagBlock(int_t k0, @(type) *ublk_ptr, int_t size,
			       MPI_Request *, gridinfo_t *, int);
extern int_t @(pre)Recv_UDiagBlock(int_t k0, @(type) *ublk_ptr, int_t size,
			      int_t src, gridinfo_t *, SCT_t*, int);
extern int_t Wait_UDiagBlockSend(MPI_Request *, gridinfo_t *, SCT_t *);
extern int_t Wait_LDiagBlockSend(MPI_Request *, gridinfo_t *, SCT_t *);
extern int_t @(pre)PackLBlock(int_t k, @(type)* Dest, Glu_persist_t *,
			 gridinfo_t *, LocalLU_t *);
extern int_t @(pre)ISend_LDiagBlock(int_t k0, @(type) *lblk_ptr, int_t size,
			       MPI_Request *, gridinfo_t *, int);
extern int_t @(pre)IRecv_UDiagBlock(int_t k0, @(type) *ublk_ptr, int_t size,
			       int_t src, MPI_Request *, gridinfo_t *,
			       SCT_t*, int);
extern int_t Wait_UDiagBlock_Recv(MPI_Request *, SCT_t *);
extern int_t Test_UDiagBlock_Recv(MPI_Request *, SCT_t *);
extern int_t @(pre)IRecv_LDiagBlock(int_t k0, @(type) *L_blk_ptr, int_t size,
			       int_t src, MPI_Request *, gridinfo_t*, SCT_t*, int);
extern int_t Wait_LDiagBlock_Recv(MPI_Request *, SCT_t *);
extern int_t Test_LDiagBlock_Recv(MPI_Request *, SCT_t *);

extern int_t @(pre)UDiagBlockRecvWait( int_t k,  int_t* IrecvPlcd_D, int_t* factored_L,
				  MPI_Request *, gridinfo_t *, LUstruct_t *, SCT_t *);
extern int_t LDiagBlockRecvWait( int_t k, int_t* factored_U, MPI_Request *, gridinfo_t *);
#if (MPI_VERSION>2)
extern int_t @(pre)IBcast_UDiagBlock(int_t k, @(type) *ublk_ptr, int_t size,
				MPI_Request *, gridinfo_t *);
extern int_t @(pre)IBcast_LDiagBlock(int_t k, @(type) *lblk_ptr, int_t size,
			       MPI_Request *, gridinfo_t *);
#endif

    /* from trfCommWrapper.h */
extern int_t @(pre)DiagFactIBCast(int_t k,  int_t k0,
			     @(type) *BlockUFactor, @(type) *BlockLFactor,
			     int_t* IrecvPlcd_D, MPI_Request *, MPI_Request *,
			     MPI_Request *, MPI_Request *, gridinfo_t *,
			     superlu_dist_options_t *, double thresh,
			     LUstruct_t *LUstruct, SuperLUStat_t *, int *info,
			     SCT_t *, int tag_ub);
extern int_t @(pre)UPanelTrSolve( int_t k, @(type)* BlockLFactor, @(type)* bigV,
			     int_t ldt, Ublock_info_t*, gridinfo_t *,
			     LUstruct_t *, SuperLUStat_t *, SCT_t *);
extern int_t Wait_LUDiagSend(int_t k, MPI_Request *, MPI_Request *,
			     gridinfo_t *, SCT_t *);
extern int_t @(pre)LPanelUpdate(int_t k,  int_t* IrecvPlcd_D, int_t* factored_L,
			   MPI_Request *, @(type)* BlockUFactor, gridinfo_t *,
			   LUstruct_t *, SCT_t *);
extern int_t @(pre)UPanelUpdate(int_t k, int_t* factored_U, MPI_Request *,
			   @(type)* BlockLFactor, @(type)* bigV,
			   int_t ldt, Ublock_info_t*, gridinfo_t *,
			   LUstruct_t *, SuperLUStat_t *, SCT_t *);
extern int_t @(pre)IBcastRecvLPanel(int_t k, int_t k0, int* msgcnt,
			       MPI_Request *, MPI_Request *,
			       int_t* Lsub_buf, @(type)* Lval_buf,
			      int_t * factored, gridinfo_t *, LUstruct_t *,
			      SCT_t *, int tag_ub);
extern int_t @(pre)IBcastRecvUPanel(int_t k, int_t k0, int* msgcnt, MPI_Request *,
			       MPI_Request *, int_t* Usub_buf, @(type)* Uval_buf,
			       gridinfo_t *, LUstruct_t *, SCT_t *, int tag_ub);
extern int_t @(pre)WaitL(int_t k, int* msgcnt, int* msgcntU, MPI_Request *,
		    MPI_Request *, gridinfo_t *, LUstruct_t *, SCT_t *);
extern int_t @(pre)WaitU(int_t k, int* msgcnt, MPI_Request *, MPI_Request *,
		   gridinfo_t *, LUstruct_t *, SCT_t *);
extern int_t @(pre)LPanelTrSolve(int_t k, int_t* factored_L, @(type)* BlockUFactor,
			    gridinfo_t *, LUstruct_t *);

    /* from trfAux.h */
extern int_t getNsupers(int, LUstruct_t *);
extern int_t initPackLUInfo(int_t nsupers, packLUInfo_t* packLUInfo);
extern int_t @(pre)SchurComplementSetup(int_t k, int *msgcnt, Ublock_info_t*,
				   Remain_info_t*, uPanelInfo_t *,
				   lPanelInfo_t *, int_t*, int_t *, int_t *,
				   @(type) *bigU, int_t* Lsub_buf,
				   @(type)* Lval_buf, int_t* Usub_buf,
				   @(type)* Uval_buf, gridinfo_t *, LUstruct_t *);
extern int_t @(pre)SchurComplementSetupGPU(int_t k, msgs_t* msgs, packLUInfo_t*,
				      int_t*, int_t*, int_t*, gEtreeInfo_t*,
				      factNodelists_t*, scuBufs_t*,
				      LUValSubBuf_t* LUvsb, gridinfo_t *,
				      LUstruct_t *, HyP_t*);
extern @(type)* @(pre)getBigV(int_t, int_t);
extern @(type)* @(pre)getBigU(int_t, gridinfo_t *, LUstruct_t *);
extern int_t getBigUSize(int_t, gridinfo_t *, LUstruct_t *);
// permutation from superLU default
extern int_t* getPerm_c_supno(int_t nsupers, superlu_dist_options_t *,
			      LUstruct_t *, gridinfo_t *);
extern void getSCUweight(int_t nsupers, treeList_t* treeList, LUstruct_t *, gridinfo3d_t *);

    /* from treeFactorization.h */
extern int_t @(pre)LluBufInit(LUValSubBuf_t*, LUstruct_t *);
extern int_t @(pre)initScuBufs(int_t ldt, int_t num_threads, int_t nsupers,
			  scuBufs_t*, LUstruct_t*, gridinfo_t *);

// the generic tree factoring code 
extern int_t treeFactor(
    int_t nnnodes,          // number of nodes in the tree
    int_t *perm_c_supno,    // list of nodes in the order of factorization
    commRequests_t *comReqs,    // lists of communication requests
    scuBufs_t *scuBufs,          // contains buffers for schur complement update
    packLUInfo_t*packLUInfo,
    msgs_t*msgs,
    LUValSubBuf_t*LUvsb,
    diagFactBufs_t *dFBuf,
    factStat_t *factStat,
    factNodelists_t  *fNlists,
    superlu_dist_options_t *options,
    int_t * gIperm_c_supno,
    int_t ldt,
    LUstruct_t *LUstruct, gridinfo3d_t * grid3d, SuperLUStat_t *stat,
    double thresh,  SCT_t *SCT,
    int *info
);

extern int_t @(pre)sparseTreeFactor(
    int_t nnodes,          // number of nodes in the tree
    int_t *perm_c_supno,    // list of nodes in the order of factorization
    treeTopoInfo_t* treeTopoInfo,
    commRequests_t *comReqs,    // lists of communication requests
    scuBufs_t *scuBufs,          // contains buffers for schur complement update
    packLUInfo_t*packLUInfo,
    msgs_t*msgs,
    LUValSubBuf_t*LUvsb,
    diagFactBufs_t *dFBuf,
    factStat_t *factStat,
    factNodelists_t  *fNlists,
    superlu_dist_options_t *options,
    int_t * gIperm_c_supno,
    int_t ldt,
    LUstruct_t *LUstruct, gridinfo3d_t * grid3d, SuperLUStat_t *stat,
    double thresh,  SCT_t *SCT,
    int *info
);

extern int_t @(pre)denseTreeFactor(
    int_t nnnodes,          // number of nodes in the tree
    int_t *perm_c_supno,    // list of nodes in the order of factorization
    commRequests_t *comReqs,    // lists of communication requests
    scuBufs_t *scuBufs,          // contains buffers for schur complement update
    packLUInfo_t*packLUInfo,
    msgs_t*msgs,
    LUValSubBuf_t*LUvsb,
    diagFactBufs_t *dFBuf,
    factStat_t *factStat,
    factNodelists_t  *fNlists,
    superlu_dist_options_t *options,
    int_t * gIperm_c_supno,
    int_t ldt,
    LUstruct_t *LUstruct, gridinfo3d_t * grid3d, SuperLUStat_t *stat,
    double thresh,  SCT_t *SCT, int tag_ub,
    int *info
);

extern int_t @(pre)sparseTreeFactor_ASYNC(
    sForest_t* sforest,
    commRequests_t **comReqss,    // lists of communication requests // size maxEtree level
    scuBufs_t *scuBufs,          // contains buffers for schur complement update
    packLUInfo_t*packLUInfo,
    msgs_t**msgss,                  // size=num Look ahead
    LUValSubBuf_t**LUvsbs,          // size=num Look ahead
    diagFactBufs_t **dFBufs,         // size maxEtree level
    factStat_t *factStat,
    factNodelists_t  *fNlists,
    gEtreeInfo_t*   gEtreeInfo,        // global etree info
    superlu_dist_options_t *options,
    int_t * gIperm_c_supno,
    int_t ldt,
    HyP_t* HyP,
    LUstruct_t *LUstruct, gridinfo3d_t * grid3d, SuperLUStat_t *stat,
    double thresh,  SCT_t *SCT, int tag_ub,
    int *info
);
extern LUValSubBuf_t** @(pre)LluBufInitArr(int_t numLA, LUstruct_t *LUstruct);
extern diagFactBufs_t** @(pre)initDiagFactBufsArr(int_t mxLeafNode, int_t ldt, gridinfo_t* grid);
extern int_t @(pre)initDiagFactBufs(int_t ldt, diagFactBufs_t* dFBuf);
extern int_t checkRecvUDiag(int_t k, commRequests_t *comReqs,
			    gridinfo_t *grid, SCT_t *SCT);
extern int_t checkRecvLDiag(int_t k, commRequests_t *comReqs, gridinfo_t *, SCT_t *);

    /* from ancFactorization.h (not called) */
extern int_t ancestorFactor(
    int_t ilvl,             // level of factorization 
    sForest_t* sforest,
    commRequests_t **comReqss,    // lists of communication requests // size maxEtree level
    scuBufs_t *scuBufs,          // contains buffers for schur complement update
    packLUInfo_t*packLUInfo,
    msgs_t**msgss,                  // size=num Look ahead
    LUValSubBuf_t**LUvsbs,          // size=num Look ahead
    diagFactBufs_t **dFBufs,         // size maxEtree level
    factStat_t *factStat,
    factNodelists_t  *fNlists,
    gEtreeInfo_t*   gEtreeInfo,        // global etree info
    superlu_dist_options_t *options,
    int_t * gIperm_c_supno,
    int_t ldt,
    HyP_t* HyP,
    LUstruct_t *LUstruct, gridinfo3d_t * grid3d, SuperLUStat_t *stat,
    double thresh,  SCT_t *SCT, int tag_ub, int *info
);

/*=====================*/

#ifdef __cplusplus
  }
#endif

#endif /* __SUPERLU_dDEFS */

